import IO from"./io.js";import Tooltip from"./tooltip.js";import Utils from"./utilities.js";import{Widget,ButtonWidget}from"./widgets.js";class Node{constructor(t,i,s){this.selected=!1,this.widgetOptions=[],this.widgets=[],this.ctx=t,this.settings=i,this.title=i.title,i.inputs[0]instanceof IO?this.inputs=i.inputs:this.inputs=i.inputs.map((t,i)=>new IO(t,!1,i,this)),i.outputs[0]instanceof IO?this.outputs=i.outputs:this.outputs=i.outputs.map((t,i)=>new IO(t,!0,i,this)),this.predicate=s,this.x=i.x,this.y=i.y,this.tooltip=i.tooltip,this.widgetOptions=i.widgetOptions||[],this.ctx.font="30px monospace",this.width=Utils.getTextWidth(this.ctx,this.title)+20,this.height=Math.max(25*this.inputs.length,25*this.outputs.length)+35,this.widgets=this.widgetOptions.map((t,i)=>new("button"===t.type?ButtonWidget:Widget)(this.ctx,this.findIO(t.parentIOName)))}draw(){this.ctx.font="30px monospace",this.ctx.fillStyle=Utils.accentColor,this.ctx.fillRect(this.x,this.y,this.width,this.height),this.selected&&(this.ctx.strokeStyle=Utils.highlightColor,this.ctx.lineWidth=3,this.ctx.strokeRect(this.x,this.y,this.width,this.height)),this.ctx.fillStyle=Utils.textColor,this.ctx.fillText(this.title,this.x+10,this.y+30);for(let t=0;t<this.inputs.length;t++)this.inputs[t].draw(this.ctx,this.x,this.y);for(let t=0;t<this.outputs.length;t++)this.outputs[t].draw(this.ctx,this.x+this.width,this.y);for(let t=0;t<this.widgets.length;t++)this.widgets[t].draw()}update(){var i=this.predicate(this.inputs,this.widgets);for(let t=0;t<this.outputs.length;t++)this.outputs[t].powered=i[t],this.outputs[t].update();for(let t=0;t<this.inputs.length;t++)this.inputs[t].update();this.draw();var s=Utils.rectContainsPoint(Utils.mouse.x,Utils.mouse.y,this.x,this.y,this.width,this.height);if(!Utils.mouse.draggingNode&&!Utils.mouse.draggingIO)for(var t=0;t<this.widgets.length;t++)this.widgets[t]instanceof ButtonWidget&&Utils.circleContainsPoint(Utils.mouse.x,Utils.mouse.y,this.widgets[t].x,this.widgets[t].y,8)&&Utils.mouse.clicking&&this.widgets[t].click();if(!Utils.mouse.draggingNode){let t;Utils.mouse.hoveringInput?t=new Tooltip(Utils.mouse.hoveringInput.name):Utils.mouse.hoveringOutput?t=new Tooltip(Utils.mouse.hoveringOutput.name):this.tooltip&&s&&(t=new Tooltip(this.tooltip)),t&&t.draw(this.ctx,Utils.mouse.x,Utils.mouse.y)}Utils.mouse.hoveringInput||Utils.mouse.hoveringOutput||Utils.mouse.draggingIO||(s&&Utils.mouse.clicking&&!Utils.mouse.draggingNode&&(Utils.mouse.draggingNode=this,Utils.mouse.dragOffset={x:Utils.mouse.x-this.x,y:Utils.mouse.y-this.y}),Utils.mouse.draggingNode===this&&this.move(Utils.mouse.x-Utils.mouse.dragOffset.x,Utils.mouse.y-Utils.mouse.dragOffset.y)),(Utils.mouse.hoveringInput||Utils.mouse.hoveringOutput||Utils.mouse.draggingIO)&&!Utils.mouse.draggingNode&&(Utils.mouse.clicking&&!Utils.mouse.draggingIO&&(Utils.mouse.draggingIO=Utils.mouse.hoveringInput||Utils.mouse.hoveringOutput),Utils.mouse.draggingIO&&Utils.bezierLine(this.ctx,Utils.mouse.x,Utils.mouse.y,Utils.mouse.draggingIO.x,Utils.mouse.draggingIO.y,Utils.textColor),!Utils.mouse.clicking)&&Utils.mouse.draggingIO&&(Utils.mouse.hoveringInput?Utils.mouse.draggingIO.connect(Utils.mouse.hoveringInput):Utils.mouse.hoveringOutput&&Utils.mouse.hoveringOutput.connect(Utils.mouse.draggingIO),Utils.mouse.draggingIO=void 0)}move(t,i){this.x=t,this.y=i}contains(t,i){return Utils.rectContainsPoint(t,i,this.x,this.y,this.width,this.height)}intersects(t,i,s,e){return Utils.rectIntersectsRect(t,i,s,e,this.x,this.y,this.width,this.height)}findIO(i){for(let t=0;t<this.inputs.length;t++)if(this.inputs[t].name===i)return this.inputs[t];for(let t=0;t<this.outputs.length;t++)if(this.outputs[t].name===i)return this.outputs[t]}delete(){for(let t=0;t<this.inputs.length;t++)this.inputs[t].delete();for(let t=0;t<this.outputs.length;t++)this.outputs[t].delete();Utils.nodes.splice(Utils.nodes.indexOf(this),1)}}export default Node;