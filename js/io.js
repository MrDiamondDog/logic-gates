import Utils from"./utilities.js";class IO{constructor(t,n,e,i){this.powered=!1,this.x=0,this.y=0,this.deleted=!1,this.connections=[],this.backwardConnections=[],this.name=t,this.isOutput=n,this.index=e,this.parentNode=i,this.allowMultipleConnections=n}checkPower(){for(let t=0;t<this.connections.length;t++)this.connections[t].powered=this.powered;if(!this.isOutput){this.powered=!1;for(let t=0;t<this.backwardConnections.length;t++)if(this.backwardConnections[t].powered){this.powered=!0;break}}}update(){this.checkPower()}draw(n,t,e){this.x=t,this.y=e+45+25*this.index,Utils.circle(n,this.x,this.y,5,Utils.powerColor(this.powered));for(let t=0;t<this.connections.length;t++)Utils.bezierLine(n,this.connections[t].x,this.connections[t].y,this.x,this.y,Utils.powerColor(this.powered))}canConnect(t){return this.isOutput!=t.isOutput&&(this.allowMultipleConnections||0==this.connections.length)&&(t.allowMultipleConnections||0==t.connections.length)&&this.parentNode!=t.parentNode&&t.parentNode!=this.parentNode}connect(t){this.canConnect(t)&&(this.connections.push(t),t.backwardConnections.push(this))}delete(){for(let t=0;t<this.connections.length;t++)this.connections[t].backwardConnections.splice(this.connections[t].backwardConnections.indexOf(this),1);for(let t=0;t<this.backwardConnections.length;t++)this.backwardConnections[t].connections.splice(this.backwardConnections[t].connections.indexOf(this),1);this.deleted=!0}}export default IO;